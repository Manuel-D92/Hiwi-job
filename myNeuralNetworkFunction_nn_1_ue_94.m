function [y1] = myNeuralNetworkFunction_nn_1_ue_94(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 11-Nov-2019 22:37:48.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-7.5675345102946;-406.081353759766;-0.0432291666666667];
x1_step1.gain = [0.00483929784988749;0.00324244820137131;0.129962432734288];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.1767185818287912713;-0.97524166393184119617;0.59093969456949413388;0.82465871407975510632;0.43495506812328205148;0.035976116336199813472;-0.78892045471311111893;0.34242304327515665774;0.28072768530057512493;0.87157660873601872087;0.89370690903803440275;0.72637010449121952593;1.1623631353012204848];
IW1_1 = [0.02968347262727829422 -0.41933271449289255539 0.54301736325645444392;-0.061043915772055500069 -1.1789053232370629853 0.20213330449028715785;0.53824955128470675092 0.82658290450630467205 0.30925711718495085822;-0.228150867187633416 -0.50860046781138879002 -0.8550249582022414474;0.68271698980870410001 -1.4129908926660883495 -1.4940897241152926167;-0.054413597104995416187 1.0195307980552206217 1.1180456310566913025;-0.34600963466651912803 -0.54344979299199736023 0.27250587300318751538;-0.49476521075449919618 0.4251004351827926131 1.2141832441182647262;-0.41907843717205967016 0.32723640524622271686 0.65850471593786163993;0.26378889736570781954 0.18481943253612312383 1.0477307389203052157;0.47916302252899800607 -0.62767225562533923711 -0.67022542638530302472;0.70896336753458366609 1.0494302488342794888 0.88080394493415981039;0.54050622469738018872 0.2552172405808868505 0.61190837202662540228];

% Layer 2
b2 = -0.71565391986610860098;
LW2_1 = [0.3158814178053784838 0.30808584146320566743 -0.44211610861916911253 -0.76194817756566657341 0.36691555811281528765 0.42863304683822112118 -1.1807567389903381727 -0.324140147591964356 1.0439289209352251575 0.41438524507673035746 1.2187049048203926205 0.60639079066154832898 -0.96561806345258116568];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00766671016573143;
y1_step1.xoffset = -59.2333333333333;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
